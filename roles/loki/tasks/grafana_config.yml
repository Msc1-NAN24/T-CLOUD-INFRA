---
- name: Get existing Grafana ConfigMap
  command: kubectl --kubeconfig={{ kubeconfig }} get configmap kube-prometheus-stack-grafana -n {{ loki_namespace }} -o yaml
  register: grafana_configmap

- name: Add Loki datasource to Grafana ConfigMap
  command: >
    kubectl --kubeconfig={{ kubeconfig }} patch configmap kube-prometheus-stack-grafana -n {{ loki_namespace }} --type=merge -p '
    {"data": {"loki-datasource.yaml": "{{ lookup('template', 'grafana-loki-datasource.yaml.j2') | to_json }}"}}'
  register: grafana_configmap_patched

- name: Restart Grafana pod to apply new datasource
  command: kubectl --kubeconfig={{ kubeconfig }} rollout restart deployment kube-prometheus-stack-grafana -n {{ loki_namespace }}
  when: grafana_configmap_patched.changed

- name: Wait for Grafana rollout to complete
  command: kubectl --kubeconfig={{ kubeconfig }} rollout status deployment kube-prometheus-stack-grafana -n {{ loki_namespace }} --timeout=300s
  when: grafana_configmap_patched.changed

- name: Verify Loki datasource in Grafana
  command: kubectl --kubeconfig={{ kubeconfig }} get configmap kube-prometheus-stack-grafana -n {{ loki_namespace }} -o jsonpath='{.data.loki-datasource\.yaml}'
  register: loki_datasource_check

- name: Display Loki datasource configuration
  debug:
    var: loki_datasource_check.stdout

- name: Check Grafana logs for any issues
  command: kubectl --kubeconfig={{ kubeconfig }} logs -l app.kubernetes.io/name=grafana -n {{ loki_namespace }} --tail=50
  register: grafana_logs

- name: Display Grafana logs
  debug:
    var: grafana_logs.stdout_lines

- name: Check if Loki datasource file is mounted
  command: kubectl --kubeconfig={{ kubeconfig }} exec -n {{ loki_namespace }} deployment/kube-prometheus-stack-grafana -- ls /etc/grafana/provisioning/datasources/
  register: datasource_files

- name: Display datasource files
  debug:
    var: datasource_files.stdout_lines

- name: Check content of datasource.yaml
  command: kubectl --kubeconfig={{ kubeconfig }} exec -n {{ loki_namespace }} deployment/kube-prometheus-stack-grafana -- cat /etc/grafana/provisioning/datasources/datasource.yaml
  register: datasource_content

- name: Display datasource content
  debug:
    var: datasource_content.stdout_lines